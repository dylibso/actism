import { CallContext } from './call-context.ts';
import { PluginOutput, type InternalConfig, InternalWasi } from './interfaces.ts';
export declare const EXTISM_ENV = "extism:host/env";
type InstantiatedModule = {
    guestType: string;
    module: WebAssembly.Module;
    instance: WebAssembly.Instance;
};
export declare class ForegroundPlugin {
    #private;
    constructor(context: CallContext, names: string[], modules: InstantiatedModule[], wasi: InternalWasi | null);
    reset(): Promise<boolean>;
    isActive(): boolean;
    functionExists(funcName: string | [string, string]): Promise<boolean>;
    callBlock(funcName: string | [string, string], input: number | null): Promise<[number | null, number | null]>;
    call(funcName: string | [string, string], input?: string | Uint8Array): Promise<PluginOutput | null>;
    private lookupTarget;
    getExports(name?: string): Promise<WebAssembly.ModuleExportDescriptor[]>;
    getImports(name?: string): Promise<WebAssembly.ModuleImportDescriptor[]>;
    getInstance(name?: string): Promise<WebAssembly.Instance>;
    close(): Promise<void>;
}
export declare function createForegroundPlugin(opts: InternalConfig, names: string[], modules: WebAssembly.Module[], context?: CallContext): Promise<ForegroundPlugin>;
export {};
