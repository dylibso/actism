{
  "version": 3,
  "sources": ["../../src/worker.ts", "../../src/interfaces.ts", "../../src/polyfills/bun-capabilities.ts", "../../src/call-context.ts", "../../src/polyfills/node-wasi.ts", "../../src/foreground-plugin.ts"],
  "sourcesContent": ["import { parentPort } from 'node:worker_threads';\n\nimport { ForegroundPlugin, createForegroundPlugin as _createForegroundPlugin } from './foreground-plugin.ts';\nimport { CallContext, EXPORT_STATE, CallState, IMPORT_STATE } from './call-context.ts';\nimport { type InternalConfig } from './interfaces.ts';\n\n// TODO: make this configurable\nconst MAX_WAIT = 5000;\n\nclass Reactor {\n  hostFlag: Int32Array | null;\n  sharedData: SharedArrayBuffer | null;\n  sharedDataView: DataView | null;\n  plugin?: ForegroundPlugin;\n  port: Exclude<typeof parentPort, null>;\n  dynamicHandlers: Map<string, (...args: any[]) => Promise<any>>;\n  context?: CallContext;\n\n  constructor(port: typeof parentPort) {\n    if (!port) {\n      throw new Error('This should be unreachable: this module should only be invoked as a web worker.');\n    }\n\n    this.sharedData = null;\n    this.sharedDataView = null;\n    this.hostFlag = null;\n    this.port = port;\n    this.port.on('message', (ev: any) => this.handleMessage(ev));\n    this.port.postMessage({ type: 'initialized' });\n\n    this.dynamicHandlers = new Map();\n    this.dynamicHandlers.set(\n      'call',\n      async (transfer: any[], name: string | [string, string], input: number | null, state: CallState) => {\n        if (!this.context) {\n          throw new Error('invalid state: no context available to worker reactor');\n        }\n\n        this.context[IMPORT_STATE](state);\n\n        const results: any = await this.plugin?.callBlock(name, input).then(\n          (indices) => [null, indices],\n          (err) => [err, null],\n        );\n\n        state = this.context[EXPORT_STATE]();\n        for (const [block] of state.blocks) {\n          if (block) {\n            transfer.push(block);\n          }\n        }\n\n        if (results[0]) {\n          results[0] = {\n            originalStack: results[0]?.stack,\n            message: results[0]?.message,\n          };\n        }\n\n        return { results, state };\n      },\n    );\n\n    this.dynamicHandlers.set('reset', async (_txf) => {\n      return this.plugin?.reset();\n    });\n\n    this.dynamicHandlers.set('getExports', async (_txf, name) => {\n      return this.plugin?.getExports(name);\n    });\n\n    this.dynamicHandlers.set('getImports', async (_txf, name) => {\n      return this.plugin?.getImports(name);\n    });\n\n    this.dynamicHandlers.set('functionExists', async (_txf, name) => {\n      return this.plugin?.functionExists(name);\n    });\n  }\n\n  async handleMessage(ev: any) {\n    switch (ev.type) {\n      case 'init':\n        return await this.handleInit(ev);\n      case 'invoke':\n        return await this.handleInvoke(ev);\n    }\n  }\n\n  async handleInvoke(ev: { handler: string; args: any[] }) {\n    const handler = this.dynamicHandlers.get(ev.handler);\n    if (!handler) {\n      return this.port.postMessage({\n        type: 'return',\n        result: [`no handler registered for ${ev.handler}`, null],\n      });\n    }\n\n    const transfer: any[] = [];\n    const results = await handler(transfer, ...(ev.args || [])).then(\n      (ok) => [null, ok],\n      (err) => [err, null],\n    );\n\n    if (results[0]) {\n      results[0] = {\n        originalStack: results[0]?.stack,\n        message: results[0]?.message,\n      };\n    }\n\n    return this.port.postMessage(\n      {\n        type: 'return',\n        results,\n      },\n      transfer,\n    );\n  }\n\n  async handleInit(\n    ev: InternalConfig & {\n      type: string;\n      names: string[];\n      modules: WebAssembly.Module[];\n      sharedData: SharedArrayBuffer;\n      functions: { [name: string]: string[] };\n    },\n  ) {\n    this.sharedData = ev.sharedData;\n    this.sharedDataView = new DataView(ev.sharedData);\n    this.hostFlag = new Int32Array(this.sharedData);\n\n    const functions = Object.fromEntries(\n      Object.entries(ev.functions).map(([namespace, funcs]) => {\n        return [\n          namespace,\n          Object.fromEntries(\n            funcs.map((funcName) => {\n              return [\n                funcName,\n                (context: CallContext, ...args: any[]) => this.callHost(context, namespace, funcName, args),\n              ];\n            }),\n          ),\n        ];\n      }),\n    );\n\n    const { type: _, modules, functions: __, ...opts } = ev;\n\n    const logLevel = (level: string) => (message: string) => this.port.postMessage({ type: 'log', level, message });\n\n    // TODO: we're using non-blocking log functions here; to properly preserve behavior we\n    // should invoke these and wait on the host to return.\n    const logger = Object.fromEntries(\n      ['info', 'debug', 'warn', 'error'].map((lvl) => [lvl, logLevel(lvl)]),\n    ) as unknown as Console;\n\n    this.context = new CallContext(ArrayBuffer, logger, ev.config);\n    // TODO: replace our internal fetch and logger\n    this.plugin = await _createForegroundPlugin(\n      { ...opts, functions, fetch, logger } as InternalConfig,\n      ev.names,\n      modules,\n      this.context,\n    );\n\n    this.port.postMessage({ type: 'ready' });\n  }\n\n  callHost(context: CallContext, namespace: string, func: string, args: (number | bigint)[]): number | bigint | void {\n    if (!this.hostFlag) {\n      throw new Error('attempted to call host before receiving shared array buffer');\n    }\n    const state = context[EXPORT_STATE]();\n\n    this.port.postMessage({\n      type: 'invoke',\n      namespace,\n      func,\n      args,\n      state,\n    });\n\n    const reader = new RingBufferReader(this.sharedData as SharedArrayBuffer);\n    const blocks: [ArrayBufferLike | null, number][] = [];\n    let retval: any;\n\n    do {\n      const sectionType = reader.readUint8();\n      switch (sectionType) {\n        // end\n        case 0:\n          state.blocks = blocks;\n          context[IMPORT_STATE](state);\n          reader.close();\n          this.hostFlag[0] = RingBufferReader.SAB_BASE_OFFSET;\n          return retval;\n\n        // ret i64\n        case 1:\n          retval = reader.readUint64();\n          break;\n\n        // ret f64\n        case 2:\n          retval = reader.readFloat64();\n          break;\n\n        // ret void\n        case 3:\n          retval = undefined;\n          break;\n\n        // block\n        case 4:\n          {\n            const index = reader.readUint32();\n            const len = reader.readUint32();\n            if (!len) {\n              blocks.push([null, index]);\n            } else {\n              const output = new Uint8Array(len);\n              reader.read(output);\n              blocks.push([output.buffer, index]);\n            }\n          }\n          break;\n\n        default:\n          throw new Error(\n            `invalid section type=\"${sectionType}\"; please open an issue (https://github.com/extism/js-sdk/issues/new?title=shared+array+buffer+bad+section+type+${sectionType}&labels=bug)`,\n          );\n          break;\n      }\n    } while (1);\n  }\n}\n\nnew Reactor(parentPort);\n\nclass RingBufferReader {\n  input: SharedArrayBuffer;\n  flag: Int32Array;\n  inputOffset: number;\n  scratch: ArrayBuffer;\n  scratchView: DataView;\n  expected: number;\n\n  static SAB_IDX = 0;\n  static SAB_BASE_OFFSET = 4;\n\n  constructor(input: SharedArrayBuffer) {\n    this.input = input;\n    this.inputOffset = RingBufferReader.SAB_BASE_OFFSET;\n    this.flag = new Int32Array(this.input);\n    this.scratch = new ArrayBuffer(8);\n    this.scratchView = new DataView(this.scratch);\n    this.expected = 0;\n    this.pull(false);\n  }\n\n  get available() {\n    return this.flag[0] - this.inputOffset;\n  }\n\n  close() {\n    while (\n      Atomics.compareExchange(this.flag, RingBufferReader.SAB_IDX, this.expected, RingBufferReader.SAB_BASE_OFFSET) !==\n      RingBufferReader.SAB_BASE_OFFSET\n    ) {} // eslint-disable-line no-empty\n    Atomics.notify(this.flag, RingBufferReader.SAB_IDX, MAX_WAIT);\n  }\n\n  pull(reset: boolean = true) {\n    if (reset) {\n      while (\n        Atomics.compareExchange(\n          this.flag,\n          RingBufferReader.SAB_IDX,\n          this.expected,\n          RingBufferReader.SAB_BASE_OFFSET,\n        ) !== RingBufferReader.SAB_BASE_OFFSET\n      ) {} // eslint-disable-line no-empty\n      Atomics.notify(this.flag, RingBufferReader.SAB_IDX, MAX_WAIT);\n    }\n    // host now copies out, once it's done it writes the available bytes to the flag.\n    const v = Atomics.wait(this.flag, 0, RingBufferReader.SAB_BASE_OFFSET, MAX_WAIT);\n    this.expected = Atomics.load(this.flag, 0);\n    if (v === 'timed-out') {\n      throw new Error(`Worker timed out waiting for response from host after ${MAX_WAIT}ms ${this.flag[0]}`);\n    }\n    this.inputOffset = RingBufferReader.SAB_BASE_OFFSET;\n  }\n\n  read(output: Uint8Array) {\n    if (output.byteLength < this.available) {\n      output.set(new Uint8Array(this.input).subarray(this.inputOffset, this.inputOffset + output.byteLength));\n      this.inputOffset += output.byteLength;\n      return;\n    }\n\n    let outputOffset = 0;\n    let extent = this.available;\n    // read ::= [outputoffset, inputoffset, extent]\n    // firstread = [this.outputOffset, 0, this.available - this.outputOffset]\n    do {\n      output.set(new Uint8Array(this.input).subarray(this.inputOffset, this.inputOffset + extent), outputOffset);\n      outputOffset += extent;\n      this.inputOffset += extent;\n      if (outputOffset === output.byteLength) {\n        break;\n      }\n\n      if (this.available < 0) {\n        break;\n      }\n\n      this.pull();\n      extent = Math.min(Math.max(this.available, 0), output.byteLength - outputOffset);\n    } while (outputOffset !== output.byteLength);\n  }\n\n  readUint8(): number {\n    this.read(new Uint8Array(this.scratch).subarray(0, 1));\n    return this.scratchView.getUint8(0);\n  }\n\n  readUint32(): number {\n    this.read(new Uint8Array(this.scratch).subarray(0, 4));\n    return this.scratchView.getUint32(0, true);\n  }\n\n  readUint64(): bigint {\n    this.read(new Uint8Array(this.scratch));\n    return this.scratchView.getBigUint64(0, true);\n  }\n\n  readFloat64(): number {\n    this.read(new Uint8Array(this.scratch));\n    return this.scratchView.getFloat64(0, true);\n  }\n}\n", "import { CallContext } from './call-context.ts';\n\n/**\n * {@link Plugin} Config\n */\nexport interface PluginConfigLike {\n  [key: string]: string;\n}\n\n/**\n * `PluginOutput` is a view around some memory exposed by the plugin. Typically\n * returned by {@link Plugin#call | `plugin.call()`} or {@link CallContext#read\n * | `callContext.read()`}. It implements the read side of\n * [`DataView`](https://mdn.io/dataview) along with methods for reading string\n * and JSON data out of the backing buffer.\n */\nexport class PluginOutput extends DataView {\n  static #decoder = new TextDecoder();\n  #bytes: Uint8Array | null = null;\n\n  /** @hidden */\n  constructor(buffer: ArrayBufferLike) {\n    super(buffer);\n  }\n\n  json(): any {\n    return JSON.parse(this.string());\n  }\n\n  arrayBuffer(): ArrayBufferLike {\n    return this.buffer;\n  }\n\n  text(): string {\n    return this.string();\n  }\n\n  /** @hidden */\n  string(): string {\n    return PluginOutput.#decoder.decode(this.buffer);\n  }\n\n  bytes(): Uint8Array {\n    this.#bytes ??= new Uint8Array(this.buffer);\n    return this.#bytes;\n  }\n\n  setInt8(_byteOffset: number, _value: number): void {\n    throw new Error('Cannot set values on output');\n  }\n\n  setInt16(_byteOffset: number, _value: number, _littleEndian?: boolean): void {\n    throw new Error('Cannot set values on output');\n  }\n\n  setInt32(_byteOffset: number, _value: number, _littleEndian?: boolean): void {\n    throw new Error('Cannot set values on output');\n  }\n\n  setUint8(_byteOffset: number, _value: number): void {\n    throw new Error('Cannot set values on output');\n  }\n\n  setUint16(_byteOffset: number, _value: number, _littleEndian?: boolean): void {\n    throw new Error('Cannot set values on output');\n  }\n\n  setUint32(_byteOffset: number, _value: number, _littleEndian?: boolean): void {\n    throw new Error('Cannot set values on output');\n  }\n\n  setFloat32(_byteOffset: number, _value: number, _littleEndian?: boolean): void {\n    throw new Error('Cannot set values on output');\n  }\n\n  setFloat64(_byteOffset: number, _value: number, _littleEndian?: boolean): void {\n    throw new Error('Cannot set values on output');\n  }\n\n  setBigInt64(_byteOffset: number, _value: bigint, _littleEndian?: boolean): void {\n    throw new Error('Cannot set values on output');\n  }\n\n  setBigUint64(_byteOffset: number, _value: bigint, _littleEndian?: boolean): void {\n    throw new Error('Cannot set values on output');\n  }\n}\n\nexport type PluginConfig = Record<string, string>;\n\nexport interface Plugin {\n  /**\n   * Check if a function exists in the WebAssembly module.\n   *\n   * @param {string | [string, string]} funcName The function's name, or a tuple of target module name and function name.\n   * @returns {Promise<boolean>} true if the function exists, otherwise false\n   */\n  functionExists(funcName: string | [string, string]): Promise<boolean>;\n  close(): Promise<void>;\n\n  /**\n   * Call a specific function from the WebAssembly module with provided input.\n   *\n   * @param {string | [string, string]} funcName The name of the function to call\n   * @param {Uint8Array | string} input The input to pass to the function\n   * @returns {Promise<PluginOutput | null>} The result from the function call\n   */\n  call(funcName: string | [string, string], input?: string | number | Uint8Array): Promise<PluginOutput | null>;\n  getExports(name?: string): Promise<WebAssembly.ModuleExportDescriptor[]>;\n  getImports(name?: string): Promise<WebAssembly.ModuleImportDescriptor[]>;\n  getInstance(name?: string): Promise<WebAssembly.Instance>;\n\n  /**\n   * Whether the plugin is currently processing a call.\n   */\n  isActive(): boolean;\n\n  /**\n   * Reset Plugin memory. If called while the plugin is {@link Plugin#isActive|actively executing}, memory will not be reset.\n   *\n   * @returns {Promise<boolean>} Whether or not the reset was successful.\n   */\n  reset(): Promise<boolean>;\n}\n\n/**\n * Options for initializing an Extism plugin.\n */\nexport interface ExtismPluginOptions {\n  /**\n   * Whether or not to enable WASI preview 1.\n   */\n  useWasi?: boolean;\n\n  /**\n   * Whether or not to run the Wasm module in a Worker thread. Requires\n   * {@link Capabilities#hasWorkerCapability | `CAPABILITIES.hasWorkerCapability`} to\n   * be true. Defaults to false.\n   *\n   * This feature is marked experimental as we work out [a bug](https://github.com/extism/js-sdk/issues/46).\n   *\n   * @experimental\n   */\n  runInWorker?: boolean;\n\n  /**\n   * A logger implementation. Must provide `info`, `debug`, `warn`, and `error` methods.\n   */\n  logger?: Console;\n\n  /**\n   * A map of namespaces to function names to host functions.\n   *\n   * ```js\n   * const functions = {\n   *   'my_great_namespace': {\n   *     'my_func': (callContext: CallContext, input: bigint) => {\n   *       const output = callContext.read(input);\n   *       if (output !== null) {\n   *         console.log(output.string());\n   *       }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  functions?: { [key: string]: { [key: string]: (callContext: CallContext, ...args: any[]) => any } } | undefined;\n  allowedPaths?: { [key: string]: string } | undefined;\n  allowedHosts?: string[] | undefined;\n\n  /**\n   * Whether WASI stdout should be forwarded to the host.\n   *\n   * Overrides the `EXTISM_ENABLE_WASI_OUTPUT` environment variable.\n   */\n  enableWasiOutput?: boolean;\n  config?: PluginConfigLike;\n  fetch?: typeof fetch;\n  sharedArrayBufferSize?: number;\n}\n\nexport interface InternalConfig {\n  logger: Console;\n  allowedHosts: string[];\n  allowedPaths: { [key: string]: string };\n  enableWasiOutput: boolean;\n  functions: { [namespace: string]: { [func: string]: any } };\n  fetch: typeof fetch;\n  wasiEnabled: boolean;\n  config: PluginConfig;\n  sharedArrayBufferSize: number;\n}\n\nexport interface InternalWasi {\n  importObject(): Promise<Record<string, WebAssembly.ImportValue>>;\n  initialize(instance: WebAssembly.Instance): Promise<void>;\n  close(): Promise<void>;\n}\n\n/**\n * Represents the raw bytes of a WASM file loaded into memory\n *\n * @category Manifests\n */\nexport interface ManifestWasmData {\n  data: Uint8Array;\n}\n\n/**\n * Represents a url to a WASM module\n */\nexport interface ManifestWasmUrl {\n  url: URL | string;\n}\n\n/**\n * Represents a path to a WASM module\n */\nexport interface ManifestWasmPath {\n  path: string;\n}\n\n/**\n * Represents a WASM module as a response\n */\nexport interface ManifestWasmResponse {\n  response: Response;\n}\n\n/**\n * Represents a WASM module as a response\n */\nexport interface ManifestWasmModule {\n  module: WebAssembly.Module;\n}\n\n/**\n * The WASM to load as bytes, a path, a fetch `Response`, a `WebAssembly.Module`, or a url\n *\n * @property name The name of the Wasm module. Used when disambiguating {@link Plugin#call | `Plugin#call`} targets when the\n * plugin embeds multiple Wasm modules.\n *\n * @property hash The expected SHA-256 hash of the associated Wasm module data. {@link createPlugin} validates incoming Wasm against\n * provided hashes. If running on Node v18, `node` must be invoked using the `--experimental-global-webcrypto` flag.\n *\n * \u26A0\uFE0F `module` cannot be used in conjunction with `hash`: the Web Platform does not currently provide a way to get source\n * bytes from a `WebAssembly.Module` in order to hash.\n *\n */\nexport type ManifestWasm = (\n  | ManifestWasmUrl\n  | ManifestWasmData\n  | ManifestWasmPath\n  | ManifestWasmResponse\n  | ManifestWasmModule\n) & {\n  name?: string;\n  hash?: string;\n};\n\n/**\n * The manifest which describes the {@link Plugin} code and runtime constraints. This is passed to {@link createPlugin}\n *\n * ```js\n * let manifest = {\n *   wasm: [{name: 'my-wasm', url: 'http://example.com/path/to/wasm'}],\n *   config: {\n *     'greeting': 'hello' // these variables will be available via `extism_get_var` in plugins\n *   }\n * }\n * ```\n *\n * Every member of `.wasm` is expected to be an instance of {@link ManifestWasm}.\n *\n * @see [Extism](https://extism.org/) > [Concepts](https://extism.org/docs/category/concepts) > [Manifest](https://extism.org/docs/concepts/manifest)\n */\nexport interface Manifest {\n  wasm: Array<ManifestWasm>;\n  config?: PluginConfigLike;\n}\n\n/**\n * Any type that can be converted into an Extism {@link Manifest}.\n * - `object` instances that implement {@link Manifest} are validated.\n * - `ArrayBuffer` instances are converted into {@link Manifest}s with a single {@link ManifestUint8Array} member.\n * - `URL` instances are fetched and their responses interpreted according to their `content-type` response header. `application/wasm` and `application/octet-stream` items\n *   are treated as {@link ManifestUint8Array} items; `application/json` and `text/json` are treated as JSON-encoded {@link Manifest}s.\n * - `string` instances that start with `http://`, `https://`, or `file://` are treated as URLs.\n * - `string` instances that start with `{` treated as JSON-encoded {@link Manifest}s.\n * - All other `string` instances are treated as {@link ManifestWasmPath}.\n *\n * ```js\n * let manifest = {\n *   wasm: [{name: 'my-wasm', url: 'http://example.com/path/to/wasm'}],\n *   config: {\n *     'greeting': 'hello' // these variables will be available via `extism_get_var` in plugins\n *   }\n * }\n *\n * let manifest = '{\"wasm\": {\"url\": \"https://example.com\"}}'\n * let manifest = 'path/to/file.wasm'\n * let manifest = new ArrayBuffer()\n * ```\n *\n * @see [Extism](https://extism.org/) > [Concepts](https://extism.org/docs/category/concepts) > [Manifest](https://extism.org/docs/concepts/manifest)\n *\n * @throws {@link TypeError} when `URL` parameters don't resolve to a known `content-type`\n * @throws {@link TypeError} when the resulting {@link Manifest} does not contain a `wasm` member with valid {@link ManifestWasm} items.\n */\nexport type ManifestLike = Manifest | Response | WebAssembly.Module | ArrayBuffer | string | URL;\n\nexport interface Capabilities {\n  /**\n   * Whether or not the environment allows SharedArrayBuffers to be passed to `TextDecoder.decode` and `TextEncoder.encodeInto` directly\n   *\n   * - \u2705 node\n   * - \u2705 deno\n   * - \u2705 bun\n   * - \u274C firefox\n   * - \u274C chrome\n   * - \u274C webkit\n   */\n  allowSharedBufferCodec: boolean;\n\n  /**\n   * Whether or not {@link ManifestWasm} items support the \"path:\" key.\n   *\n   * - \u2705 node\n   * - \u2705 deno\n   * - \u2705 bun\n   * - \u274C firefox\n   * - \u274C chrome\n   * - \u274C webkit\n   */\n  manifestSupportsPaths: boolean;\n\n  /**\n   * Whether or not cross-origin checks are enforced for outgoing HTTP requests on this platform.\n   *\n   * - \u274C node\n   * - \u274C deno\n   * - \u274C bun\n   * - \u2705 firefox\n   * - \u2705 chrome\n   * - \u2705 webkit\n   */\n  crossOriginChecksEnforced: boolean;\n\n  /**\n   * Whether or not the host environment has access to a filesystem.\n   *\n   * - \u2705 node\n   * - \u2705 deno\n   * - \u2705 bun\n   * - \u274C firefox\n   * - \u274C chrome\n   * - \u274C webkit\n   */\n  fsAccess: boolean;\n\n  /**\n   * Whether or not the host environment supports moving Wasm plugin workloads to a worker. This requires\n   * SharedArrayBuffer support, which requires `window.crossOriginIsolated` to be true in browsers.\n   *\n   * @see [`crossOriginalIsolated` on MDN](https://mdn.io/crossOriginIsolated)\n   *\n   * - \u2705 node\n   * - \u2705 deno\n   * - \u2705 bun\n   * - \uD83D\uDD12 firefox\n   * - \uD83D\uDD12 chrome\n   * - \uD83D\uDD12 webkit\n   */\n  hasWorkerCapability: boolean;\n\n  /**\n   * Whether or not the host environment supports WASI preview 1.\n   *\n   * @see [`WASI`](https://wasi.dev/) and [`WASI Preview 1`](https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md)\n   *\n   * - \u2705 node (via [`node:wasi`](https://nodejs.org/api/wasi.html))\n   * - \u2705 deno (via [`deno.land/std/wasi/snapshot_preview1`](https://deno.land/std@0.200.0/wasi/snapshot_preview1.ts))\n   * - \u274C bun\n   * - \u2705 firefox (via [`@bjorn3/browser_wasi_shim`](https://www.npmjs.com/package/@bjorn3/browser_wasi_shim))\n   * - \u2705 chrome (via [`@bjorn3/browser_wasi_shim`](https://www.npmjs.com/package/@bjorn3/browser_wasi_shim))\n   * - \u2705 webkit (via [`@bjorn3/browser_wasi_shim`](https://www.npmjs.com/package/@bjorn3/browser_wasi_shim))\n   */\n  supportsWasiPreview1: boolean;\n\n  /**\n   * Whether or not the `EXTISM_ENABLE_WASI_OUTPUT` environment variable has been set.\n   *\n   * This value is consulted whenever {@link ExtismPluginOptions#enableWasiOutput} is omitted.\n   */\n  extismStdoutEnvVarSet: boolean;\n}\n", "import type { Capabilities } from '../interfaces.ts';\n\nexport const CAPABILITIES: Capabilities = {\n  // When false, shared buffers have to be copied to an array\n  // buffer before passing to Text{En,De}coding()\n  allowSharedBufferCodec: false,\n\n  // Whether or not the manifest supports the \"path:\" key.\n  manifestSupportsPaths: true,\n\n  // Whether or not cross-origin checks are enforced on this platform.\n  crossOriginChecksEnforced: false,\n\n  fsAccess: true,\n\n  hasWorkerCapability: true,\n\n  // See https://github.com/oven-sh/bun/issues/1960\n  supportsWasiPreview1: false,\n\n  extismStdoutEnvVarSet: Boolean(process.env.EXTISM_ENABLE_WASI_OUTPUT),\n};\n", "import { type PluginConfig, PluginOutput } from './interfaces.ts';\nimport { CAPABILITIES } from './polyfills/deno-capabilities.ts';\n\nexport const BEGIN = Symbol('begin');\nexport const END = Symbol('end');\nexport const ENV = Symbol('env');\nexport const GET_BLOCK = Symbol('get-block');\nexport const IMPORT_STATE = Symbol('import-state');\nexport const EXPORT_STATE = Symbol('export-state');\nexport const STORE = Symbol('store-value');\nexport const RESET = Symbol('reset');\n\nexport class Block {\n  buffer: ArrayBufferLike;\n  view: DataView;\n  local: boolean;\n\n  get byteLength() {\n    return this.buffer.byteLength;\n  }\n\n  constructor(arrayBuffer: ArrayBufferLike, local: boolean) {\n    this.buffer = arrayBuffer;\n    this.view = new DataView(this.buffer);\n    this.local = local;\n  }\n\n  static indexToAddress(idx: bigint | number): bigint {\n    return BigInt(idx) << 48n;\n  }\n\n  static addressToIndex(addr: bigint | number): number {\n    return Number(BigInt(addr) >> 48n);\n  }\n\n  static maskAddress(addr: bigint | number): number {\n    return Number(BigInt(addr) & ((1n << 48n) - 1n));\n  }\n}\n\nexport type CallState = {\n  blocks: [ArrayBufferLike | null, number][];\n  stack: [number | null, number | null, number | null][];\n};\n\nexport class CallContext {\n  #stack: [number | null, number | null, number | null][];\n  #blocks: (Block | null)[] = [];\n  #logger: Console;\n  #decoder: TextDecoder;\n  #encoder: TextEncoder;\n  #arrayBufferType: { new (size: number): ArrayBufferLike };\n  #config: PluginConfig;\n  #vars: Map<string, number> = new Map();\n\n  /** @hidden */\n  constructor(type: { new (size: number): ArrayBufferLike }, logger: Console, config: PluginConfig) {\n    this.#arrayBufferType = type;\n    this.#logger = logger;\n    this.#decoder = new TextDecoder();\n    this.#encoder = new TextEncoder();\n\n    this.#stack = [];\n\n    // reserve the null page.\n    this.alloc(1);\n\n    this.#config = config;\n  }\n\n  /**\n   * Allocate a chunk of host memory visible to plugins via other extism host functions.\n   * Returns the start address of the block.\n   */\n  alloc(size: bigint | number): bigint {\n    const block = new Block(new this.#arrayBufferType(Number(size)), true);\n    const index = this.#blocks.length;\n    this.#blocks.push(block);\n    return Block.indexToAddress(index);\n  }\n\n  /**\n   * Read a variable from extism memory by name.\n   *\n   * @returns {@link PluginOutput}\n   */\n  getVariable(name: string): PluginOutput | null {\n    if (!this.#vars.has(name)) {\n      return null;\n    }\n    return this.read(this.#vars.get(name) as number);\n  }\n\n  /**\n   * Set a variable to a given string or byte array value. Returns the start\n   * address of the variable. The start address is reused when changing the\n   * value of an existing variable.\n   *\n   * @returns bigint\n   */\n  setVariable(name: string, value: string | Uint8Array): bigint {\n    const newIdx = this[STORE](value);\n    if (newIdx === null) {\n      return 0n;\n    }\n\n    // Re-use the old address mapping.\n    const oldIdx = this.#vars.get(name) ?? null;\n    if (oldIdx !== null) {\n      this.#blocks[oldIdx] = this.#blocks[newIdx];\n      this.#blocks[newIdx] = null;\n      if (newIdx === this.#blocks.length - 1) {\n        this.#blocks.pop();\n      }\n    }\n\n    this.#vars.set(name, oldIdx ?? newIdx);\n    return Block.indexToAddress(oldIdx ?? newIdx);\n  }\n\n  /**\n   * Given an address in extism memory, return a {@link PluginOutput} that represents\n   * a view of that memory. Returns null if the address is invalid.\n   *\n   * @returns bigint\n   */\n  read(addr: bigint | number): PluginOutput | null {\n    const blockIdx = Block.addressToIndex(addr);\n    const block = this.#blocks[blockIdx];\n    if (!block) {\n      return null;\n    }\n\n    const buffer =\n      !(block.buffer instanceof ArrayBuffer) && !CAPABILITIES.allowSharedBufferCodec\n        ? new Uint8Array(block.buffer).slice().buffer\n        : block.buffer;\n\n    return new PluginOutput(buffer);\n  }\n\n  /**\n   * Store a string or Uint8Array value in extism memory.\n   *\n   * @returns bigint\n   */\n  store(input: string | Uint8Array): bigint {\n    const idx = this[STORE](input);\n    if (!idx) {\n      throw new Error('failed to store output');\n    }\n    return Block.indexToAddress(idx);\n  }\n\n  length(addr: bigint): bigint {\n    const blockIdx = Block.addressToIndex(addr);\n    const block = this.#blocks[blockIdx];\n    if (!block) {\n      return 0n;\n    }\n    return BigInt(block.buffer.byteLength);\n  }\n\n  /** @hidden */\n  [ENV] = {\n    alloc: (n: bigint): bigint => {\n      return this.alloc(n);\n    },\n\n    free: (addr: number) => {\n      this.#blocks[Block.addressToIndex(addr)] = null;\n    },\n\n    load_u8: (addr: bigint): number => {\n      const blockIdx = Block.addressToIndex(addr);\n      const offset = Block.maskAddress(addr);\n      const block = this.#blocks[blockIdx];\n      return block?.view.getUint8(Number(offset)) as number;\n    },\n\n    load_u64: (addr: bigint): bigint => {\n      const blockIdx = Block.addressToIndex(addr);\n      const offset = Block.maskAddress(addr);\n      const block = this.#blocks[blockIdx];\n      return block?.view.getBigUint64(Number(offset), true) as bigint;\n    },\n\n    store_u8: (addr: bigint, n: number) => {\n      const blockIdx = Block.addressToIndex(addr);\n      const offset = Block.maskAddress(addr);\n      const block = this.#blocks[blockIdx];\n      block?.view.setUint8(Number(offset), Number(n));\n    },\n\n    store_u64: (addr: bigint, n: bigint) => {\n      const blockIdx = Block.addressToIndex(addr);\n      const offset = Block.maskAddress(addr);\n      const block = this.#blocks[blockIdx];\n      block?.view.setBigUint64(Number(offset), n, true);\n    },\n\n    input_offset: () => {\n      const blockIdx = this.#stack[this.#stack.length - 1][0];\n      return Block.indexToAddress(blockIdx || 0);\n    },\n\n    input_length: () => {\n      return BigInt(this.#input?.byteLength ?? 0);\n    },\n\n    input_load_u8: (addr: bigint): number => {\n      const offset = Block.maskAddress(addr);\n      return this.#input?.view.getUint8(Number(offset)) as number;\n    },\n\n    input_load_u64: (addr: bigint): bigint => {\n      const offset = Block.maskAddress(addr);\n      return this.#input?.view.getBigUint64(Number(offset), true) as bigint;\n    },\n\n    output_set: (addr: bigint, length: bigint) => {\n      const blockIdx = Block.addressToIndex(addr);\n      const block = this.#blocks[blockIdx];\n      if (!block) {\n        throw new Error(`cannot assign to this block (addr=${addr.toString(16).padStart(16, '0')}; length=${length})`);\n      }\n\n      if (length > block.buffer.byteLength) {\n        throw new Error('length longer than target block');\n      }\n\n      this.#stack[this.#stack.length - 1][1] = blockIdx;\n    },\n\n    error_set: (addr: bigint) => {\n      const blockIdx = Block.addressToIndex(addr);\n      const block = this.#blocks[blockIdx];\n      if (!block) {\n        throw new Error('cannot assign to this block');\n      }\n\n      this.#stack[this.#stack.length - 1][2] = blockIdx;\n    },\n\n    config_get: (addr: bigint): bigint => {\n      const item = this.read(addr);\n\n      if (item === null) {\n        return 0n;\n      }\n\n      const key = item.string();\n\n      if (key in this.#config) {\n        return this.store(this.#config[key]);\n      }\n\n      return 0n;\n    },\n\n    var_get: (addr: bigint): bigint => {\n      const item = this.read(addr);\n\n      if (item === null) {\n        return 0n;\n      }\n\n      const key = item.string();\n      return this.#vars.has(key) ? Block.indexToAddress(this.#vars.get(key) as number) : 0n;\n    },\n\n    var_set: (addr: bigint, valueaddr: bigint) => {\n      const item = this.read(addr);\n\n      if (item === null) {\n        return 0n;\n      }\n\n      const key = item.string();\n      if (valueaddr === 0n) {\n        this.#vars.delete(key);\n        return 0n;\n      }\n\n      this.#vars.set(key, Block.addressToIndex(valueaddr));\n    },\n\n    http_request: (_requestOffset: bigint, _bodyOffset: bigint): bigint => {\n      this.#logger.error('http_request is not enabled');\n      return 0n;\n    },\n\n    http_status_code: (): number => {\n      this.#logger.error('http_status_code is not enabled');\n      return 0;\n    },\n\n    length: (addr: bigint): bigint => {\n      return this.length(addr);\n    },\n\n    length_unsafe: (addr: bigint): bigint => {\n      return this.length(addr);\n    },\n\n    log_warn: (addr: bigint) => {\n      const blockIdx = Block.addressToIndex(addr);\n      const block = this.#blocks[blockIdx];\n      if (!block) {\n        return this.#logger.error(\n          `failed to log(warn): bad block reference in addr 0x${addr.toString(16).padStart(64, '0')}`,\n        );\n      }\n      const text = this.#decoder.decode(block.buffer);\n      this.#logger.warn(text);\n    },\n\n    log_info: (addr: bigint) => {\n      const blockIdx = Block.addressToIndex(addr);\n      const block = this.#blocks[blockIdx];\n      if (!block) {\n        return this.#logger.error(\n          `failed to log(info): bad block reference in addr 0x${addr.toString(16).padStart(64, '0')}`,\n        );\n      }\n      const text = this.#decoder.decode(block.buffer);\n      this.#logger.info(text);\n    },\n\n    log_debug: (addr: bigint) => {\n      const blockIdx = Block.addressToIndex(addr);\n      const block = this.#blocks[blockIdx];\n      if (!block) {\n        return this.#logger.error(\n          `failed to log(debug): bad block reference in addr 0x${addr.toString(16).padStart(64, '0')}`,\n        );\n      }\n      const text = this.#decoder.decode(block.buffer);\n      this.#logger.debug(text);\n    },\n\n    log_error: (addr: bigint) => {\n      const blockIdx = Block.addressToIndex(addr);\n      const block = this.#blocks[blockIdx];\n      if (!block) {\n        return this.#logger.error(\n          `failed to log(error): bad block reference in addr 0x${addr.toString(16).padStart(64, '0')}`,\n        );\n      }\n      const text = this.#decoder.decode(block.buffer);\n      this.#logger.error(text);\n    },\n  };\n\n  /** @hidden */\n  get #input(): Block | null {\n    const idx = this.#stack[this.#stack.length - 1][0];\n    if (idx === null) {\n      return null;\n    }\n    return this.#blocks[idx];\n  }\n\n  /** @hidden */\n  [RESET]() {\n    // preserve the null page.\n    this.#blocks.length = 1;\n\n    // ... but dump the stack items.\n    this.#stack.length = 0;\n  }\n\n  /** @hidden */\n  [GET_BLOCK](index: number): Block {\n    const block = this.#blocks[index];\n    if (!block) {\n      throw new Error(`invalid block index: ${index}`);\n    }\n    return block;\n  }\n\n  /** @hidden */\n  [IMPORT_STATE](state: CallState, copy: boolean = false) {\n    // eslint-disable-next-line prefer-const\n    for (let [buf, idx] of state.blocks) {\n      if (buf && copy) {\n        const dst = new Uint8Array(new this.#arrayBufferType(Number(buf.byteLength)));\n        dst.set(new Uint8Array(buf));\n        buf = dst.buffer;\n      }\n      this.#blocks[idx] = buf ? new Block(buf, false) : null;\n    }\n    this.#stack = state.stack;\n  }\n\n  /** @hidden */\n  [EXPORT_STATE](): CallState {\n    return {\n      stack: this.#stack.slice(),\n      blocks: this.#blocks\n        .map((block, idx) => {\n          if (!block) {\n            return [null, idx];\n          }\n\n          if (block.local) {\n            block.local = false;\n            return [block.buffer, idx];\n          }\n          return null;\n        })\n        .filter(Boolean) as [ArrayBufferLike, number][],\n    };\n  }\n\n  /** @hidden */\n  [STORE](input?: string | Uint8Array) {\n    if (!input) {\n      return null;\n    }\n\n    if (typeof input === 'string') {\n      input = this.#encoder.encode(input);\n    }\n\n    if (input instanceof Uint8Array) {\n      if (input.buffer.constructor === this.#arrayBufferType) {\n        // no action necessary, wrap it up in a block\n        const idx = this.#blocks.length;\n        this.#blocks.push(new Block(input.buffer, true));\n        return idx;\n      }\n      const idx = Block.addressToIndex(this.alloc(input.length));\n      const block = this.#blocks[idx] as Block;\n      const buf = new Uint8Array(block.buffer);\n      buf.set(input, 0);\n      return idx;\n    }\n\n    return input;\n  }\n\n  /** @hidden */\n  [BEGIN](input: number | null) {\n    this.#stack.push([input, null, null]);\n  }\n\n  /** @hidden */\n  [END](): [number | null, number | null] {\n    const [, outputIdx, errorIdx] = this.#stack.pop() as (number | null)[];\n    const outputPosition = errorIdx === null ? 1 : 0;\n    const idx = errorIdx ?? outputIdx;\n    const result: [number | null, number | null] = [null, null];\n\n    if (idx === null) {\n      return result;\n    }\n\n    const block = this.#blocks[idx];\n\n    if (block === null) {\n      // TODO: this might be an error? we got an output idx but it referred to a freed (or non-existant) block\n      return result;\n    }\n\n    result[outputPosition] = idx;\n\n    return result;\n  }\n}\n", "import { WASI } from 'wasi';\nimport { type InternalWasi } from '../interfaces.ts';\nimport { devNull } from 'node:os';\nimport { open } from 'node:fs/promises';\nimport { closeSync } from 'node:fs';\n\nasync function createDevNullFDs() {\n  const [stdin, stdout] = await Promise.all([open(devNull, 'r'), open(devNull, 'w')]);\n  let needsClose = true;\n  // TODO: make this check always run when bun fixes [1], so `fs.promises.open()` returns a `FileHandle` as expected.\n  // [1]: https://github.com/oven-sh/bun/issues/5918\n  let close = async () => {\n    closeSync(stdin as any);\n    closeSync(stdout as any);\n  };\n  if (typeof stdin !== 'number') {\n    const fr = new globalThis.FinalizationRegistry((held: number) => {\n      try {\n        if (needsClose) closeSync(held);\n      } catch {\n        // The fd may already be closed.\n      }\n    });\n\n    fr.register(stdin, stdin.fd);\n    fr.register(stdout, stdout.fd);\n    close = async () => {\n      needsClose = false;\n      await Promise.all([stdin.close(), stdout.close()]).catch(() => {});\n    };\n  }\n\n  return {\n    close,\n    fds: [stdin.fd, stdout.fd, stdout.fd],\n  };\n}\n\nexport async function loadWasi(\n  allowedPaths: { [from: string]: string },\n  enableWasiOutput: boolean,\n): Promise<InternalWasi> {\n  const {\n    close,\n    fds: [stdin, stdout, stderr],\n  } = enableWasiOutput ? { async close() {}, fds: [0, 1, 2] } : await createDevNullFDs();\n\n  const context = new WASI({\n    version: 'preview1',\n    preopens: allowedPaths,\n    stdin,\n    stdout,\n    stderr,\n  } as any);\n\n  return {\n    async importObject() {\n      return context.wasiImport;\n    },\n\n    async close() {\n      await close();\n    },\n\n    async initialize(instance: WebAssembly.Instance) {\n      const memory = instance.exports.memory as WebAssembly.Memory;\n\n      if (!memory) {\n        throw new Error('The module has to export a default memory.');\n      }\n\n      if (instance.exports._initialize) {\n        const init = instance.exports._initialize as CallableFunction;\n        if (context.initialize) {\n          context.initialize({\n            exports: {\n              memory,\n              _initialize: () => {\n                init();\n              },\n            },\n          });\n        } else {\n          init();\n        }\n      } else {\n        context.start({\n          exports: {\n            memory,\n            _start: () => {},\n          },\n        });\n      }\n    },\n  };\n}\n", "import { CallContext, RESET, GET_BLOCK, BEGIN, END, ENV, STORE } from './call-context.ts';\nimport { PluginOutput, type InternalConfig, InternalWasi } from './interfaces.ts';\nimport { loadWasi } from './polyfills/deno-wasi.ts';\n\nexport const EXTISM_ENV = 'extism:host/env';\n\ntype InstantiatedModule = { guestType: string; module: WebAssembly.Module; instance: WebAssembly.Instance };\n\nexport class ForegroundPlugin {\n  #context: CallContext;\n  #modules: InstantiatedModule[];\n  #names: string[];\n  #active: boolean = false;\n  #wasi: InternalWasi | null;\n\n  constructor(context: CallContext, names: string[], modules: InstantiatedModule[], wasi: InternalWasi | null) {\n    this.#context = context;\n    this.#names = names;\n    this.#modules = modules;\n    this.#wasi = wasi;\n  }\n\n  async reset(): Promise<boolean> {\n    if (this.isActive()) {\n      return false;\n    }\n\n    this.#context[RESET]();\n    return true;\n  }\n\n  isActive() {\n    return this.#active;\n  }\n\n  async functionExists(funcName: string | [string, string]): Promise<boolean> {\n    try {\n      const search: string[] = [].concat(<any>funcName);\n      const [target, name] =\n        search.length === 2\n          ? [this.lookupTarget(search[0]), search[1]]\n          : [\n              this.#modules.find((guest) => {\n                const exports = WebAssembly.Module.exports(guest.module);\n                return exports.find((item) => {\n                  return item.name === search[0] && item.kind === 'function';\n                });\n              }),\n              search[0],\n            ];\n\n      if (!target) {\n        return false;\n      }\n\n      const func = target.instance.exports[name] as any;\n\n      if (!func) {\n        return false;\n      }\n\n      return true;\n    } catch {\n      // lookupTarget will throw if it cannot find the specified target; cast it into a boolean\n      return false;\n    }\n  }\n\n  async callBlock(funcName: string | [string, string], input: number | null): Promise<[number | null, number | null]> {\n    this.#active = true;\n    const search: string[] = [].concat(<any>funcName);\n    const [target, name] =\n      search.length === 2\n        ? [this.lookupTarget(search[0]), search[1]]\n        : [\n            this.#modules.find((guest) => {\n              const exports = WebAssembly.Module.exports(guest.module);\n              return exports.find((item) => {\n                return item.name === search[0] && item.kind === 'function';\n              });\n            }),\n            search[0],\n          ];\n\n    if (!target) {\n      throw Error(`Plugin error: target \"${search.join('\" \"')}\" does not exist`);\n    }\n    const func = target.instance.exports[name] as any;\n    if (!func) {\n      throw Error(`Plugin error: function \"${search.join('\" \"')}\" does not exist`);\n    }\n\n    this.#context[BEGIN](input ?? null);\n    try {\n      func();\n      return this.#context[END]();\n    } catch (err) {\n      this.#context[END]();\n      throw err;\n    } finally {\n      this.#active = false;\n    }\n  }\n\n  async call(funcName: string | [string, string], input?: string | Uint8Array): Promise<PluginOutput | null> {\n    const inputIdx = this.#context[STORE](input);\n    const [errorIdx, outputIdx] = await this.callBlock(funcName, inputIdx);\n    const shouldThrow = errorIdx !== null;\n    const idx = errorIdx ?? outputIdx;\n\n    if (idx === null) {\n      return null;\n    }\n\n    const block = this.#context[GET_BLOCK](idx);\n    if (!block) {\n      return null;\n    }\n\n    const output = new PluginOutput(block.buffer);\n    if (shouldThrow) {\n      throw new Error(`Plugin-originated error: ${output.string()}`);\n    }\n    return output;\n  }\n\n  private lookupTarget(name: any): InstantiatedModule {\n    const target = String(name ?? '0');\n    const idx = this.#names.findIndex((xs) => xs === target);\n    if (idx === -1) {\n      throw new Error(`no module named \"${name}\"`);\n    }\n    return this.#modules[idx];\n  }\n\n  async getExports(name?: string): Promise<WebAssembly.ModuleExportDescriptor[]> {\n    return WebAssembly.Module.exports(this.lookupTarget(name).module) || [];\n  }\n\n  async getImports(name?: string): Promise<WebAssembly.ModuleImportDescriptor[]> {\n    return WebAssembly.Module.imports(this.lookupTarget(name).module) || [];\n  }\n\n  async getInstance(name?: string): Promise<WebAssembly.Instance> {\n    return this.lookupTarget(name).instance;\n  }\n\n  async close(): Promise<void> {\n    if (this.#wasi) {\n      await this.#wasi.close();\n      this.#wasi = null;\n    }\n  }\n}\n\nexport async function createForegroundPlugin(\n  opts: InternalConfig,\n  names: string[],\n  modules: WebAssembly.Module[],\n  context: CallContext = new CallContext(ArrayBuffer, opts.logger, opts.config),\n): Promise<ForegroundPlugin> {\n  const wasi = opts.wasiEnabled ? await loadWasi(opts.allowedPaths, opts.enableWasiOutput) : null;\n\n  const imports: Record<string, Record<string, any>> = {\n    ...(wasi ? { wasi_snapshot_preview1: await wasi.importObject() } : {}),\n    [EXTISM_ENV]: context[ENV],\n    env: {},\n  };\n\n  for (const namespace in opts.functions) {\n    imports[namespace] = imports[namespace] || {};\n    for (const func in opts.functions[namespace]) {\n      imports[namespace][func] = opts.functions[namespace][func].bind(null, context);\n    }\n  }\n\n  const instances = await Promise.all(\n    modules.map(async (module) => {\n      const instance = await WebAssembly.instantiate(module, imports);\n      if (wasi) {\n        await wasi?.initialize(instance);\n      }\n\n      const guestType = instance.exports.hs_init\n        ? 'haskell'\n        : instance.exports._initialize\n        ? 'reactor'\n        : instance.exports._start\n        ? 'command'\n        : 'none';\n\n      const initRuntime: any = instance.exports.hs_init ? instance.exports.hs_init : () => {};\n      initRuntime();\n\n      return { module, instance, guestType };\n    }),\n  );\n\n  return new ForegroundPlugin(context, names, instances, wasi);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,SAAS,kBAAkB;;;ACA3B;AAgBO,IAAM,gBAAN,cAA2B,SAAS;AAAA,EAKzC,YAAY,QAAyB;AACnC,UAAM,MAAM;AAJd,+BAA4B;AAAA,EAK5B;AAAA,EAEA,OAAY;AACV,WAAO,KAAK,MAAM,KAAK,OAAO,CAAC;AAAA,EACjC;AAAA,EAEA,cAA+B;AAC7B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,OAAe;AACb,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EAGA,SAAiB;AACf,WAAO,4BAAa,UAAS,OAAO,KAAK,MAAM;AAAA,EACjD;AAAA,EAEA,QAAoB;AAClB,uBAAK,WAAL,mBAAK,QAAW,IAAI,WAAW,KAAK,MAAM;AAC1C,WAAO,mBAAK;AAAA,EACd;AAAA,EAEA,QAAQ,aAAqB,QAAsB;AACjD,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,SAAS,aAAqB,QAAgB,eAA+B;AAC3E,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,SAAS,aAAqB,QAAgB,eAA+B;AAC3E,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,SAAS,aAAqB,QAAsB;AAClD,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,UAAU,aAAqB,QAAgB,eAA+B;AAC5E,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,UAAU,aAAqB,QAAgB,eAA+B;AAC5E,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,WAAW,aAAqB,QAAgB,eAA+B;AAC7E,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,WAAW,aAAqB,QAAgB,eAA+B;AAC7E,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,YAAY,aAAqB,QAAgB,eAA+B;AAC9E,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AAAA,EAEA,aAAa,aAAqB,QAAgB,eAA+B;AAC/E,UAAM,IAAI,MAAM,6BAA6B;AAAA,EAC/C;AACF;AAtEO,IAAM,eAAN;AACE;AACP;AADA,aADW,cACJ,UAAW,IAAI,YAAY;;;ACf7B,IAAM,eAA6B;AAAA,EAGxC,wBAAwB;AAAA,EAGxB,uBAAuB;AAAA,EAGvB,2BAA2B;AAAA,EAE3B,UAAU;AAAA,EAEV,qBAAqB;AAAA,EAGrB,sBAAsB;AAAA,EAEtB,uBAAuB,QAAQ,QAAQ,IAAI,yBAAyB;AACtE;;;AClBO,IAAM,QAAQ,OAAO,OAAO;AAC5B,IAAM,MAAM,OAAO,KAAK;AACxB,IAAM,MAAM,OAAO,KAAK;AACxB,IAAM,YAAY,OAAO,WAAW;AACpC,IAAM,eAAe,OAAO,cAAc;AAC1C,IAAM,eAAe,OAAO,cAAc;AAC1C,IAAM,QAAQ,OAAO,aAAa;AAClC,IAAM,QAAQ,OAAO,OAAO;AAE5B,IAAM,QAAN,MAAY;AAAA,EAKjB,IAAI,aAAa;AACf,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EAEA,YAAY,aAA8B,OAAgB;AACxD,SAAK,SAAS;AACd,SAAK,OAAO,IAAI,SAAS,KAAK,MAAM;AACpC,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,OAAO,eAAe,KAA8B;AAClD,WAAO,OAAO,GAAG,KAAK;AAAA,EACxB;AAAA,EAEA,OAAO,eAAe,MAA+B;AACnD,WAAO,OAAO,OAAO,IAAI,KAAK,GAAG;AAAA,EACnC;AAAA,EAEA,OAAO,YAAY,MAA+B;AAChD,WAAO,OAAO,OAAO,IAAI,KAAM,MAAM,OAAO,EAAG;AAAA,EACjD;AACF;AAtCA;AA6CO,IAAM,cAAN,MAAkB;AAAA,EAWvB,YAAY,MAA+C,QAAiB,QAAsB;AATlG,mBAA4B,CAAC;AAM7B,iBAA6B,oBAAI,IAAI;AA+GrC,SAAC,MAAO;AAAA,MACN,OAAO,CAAC,MAAsB;AAC5B,eAAO,KAAK,MAAM,CAAC;AAAA,MACrB;AAAA,MAEA,MAAM,CAAC,SAAiB;AACtB,aAAK,QAAQ,MAAM,eAAe,IAAI,KAAK;AAAA,MAC7C;AAAA,MAEA,SAAS,CAAC,SAAyB;AACjC,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,SAAS,MAAM,YAAY,IAAI;AACrC,cAAM,QAAQ,KAAK,QAAQ;AAC3B,eAAO,OAAO,KAAK,SAAS,OAAO,MAAM,CAAC;AAAA,MAC5C;AAAA,MAEA,UAAU,CAAC,SAAyB;AAClC,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,SAAS,MAAM,YAAY,IAAI;AACrC,cAAM,QAAQ,KAAK,QAAQ;AAC3B,eAAO,OAAO,KAAK,aAAa,OAAO,MAAM,GAAG,IAAI;AAAA,MACtD;AAAA,MAEA,UAAU,CAAC,MAAc,MAAc;AACrC,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,SAAS,MAAM,YAAY,IAAI;AACrC,cAAM,QAAQ,KAAK,QAAQ;AAC3B,eAAO,KAAK,SAAS,OAAO,MAAM,GAAG,OAAO,CAAC,CAAC;AAAA,MAChD;AAAA,MAEA,WAAW,CAAC,MAAc,MAAc;AACtC,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,SAAS,MAAM,YAAY,IAAI;AACrC,cAAM,QAAQ,KAAK,QAAQ;AAC3B,eAAO,KAAK,aAAa,OAAO,MAAM,GAAG,GAAG,IAAI;AAAA,MAClD;AAAA,MAEA,cAAc,MAAM;AAClB,cAAM,WAAW,KAAK,OAAO,KAAK,OAAO,SAAS,GAAG;AACrD,eAAO,MAAM,eAAe,YAAY,CAAC;AAAA,MAC3C;AAAA,MAEA,cAAc,MAAM;AAClB,eAAO,OAAO,KAAK,QAAQ,cAAc,CAAC;AAAA,MAC5C;AAAA,MAEA,eAAe,CAAC,SAAyB;AACvC,cAAM,SAAS,MAAM,YAAY,IAAI;AACrC,eAAO,KAAK,QAAQ,KAAK,SAAS,OAAO,MAAM,CAAC;AAAA,MAClD;AAAA,MAEA,gBAAgB,CAAC,SAAyB;AACxC,cAAM,SAAS,MAAM,YAAY,IAAI;AACrC,eAAO,KAAK,QAAQ,KAAK,aAAa,OAAO,MAAM,GAAG,IAAI;AAAA,MAC5D;AAAA,MAEA,YAAY,CAAC,MAAc,WAAmB;AAC5C,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAI,CAAC,OAAO;AACV,gBAAM,IAAI,MAAM,qCAAqC,KAAK,SAAS,EAAE,EAAE,SAAS,IAAI,GAAG,aAAa,SAAS;AAAA,QAC/G;AAEA,YAAI,SAAS,MAAM,OAAO,YAAY;AACpC,gBAAM,IAAI,MAAM,iCAAiC;AAAA,QACnD;AAEA,aAAK,OAAO,KAAK,OAAO,SAAS,GAAG,KAAK;AAAA,MAC3C;AAAA,MAEA,WAAW,CAAC,SAAiB;AAC3B,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAI,CAAC,OAAO;AACV,gBAAM,IAAI,MAAM,6BAA6B;AAAA,QAC/C;AAEA,aAAK,OAAO,KAAK,OAAO,SAAS,GAAG,KAAK;AAAA,MAC3C;AAAA,MAEA,YAAY,CAAC,SAAyB;AACpC,cAAM,OAAO,KAAK,KAAK,IAAI;AAE3B,YAAI,SAAS,MAAM;AACjB,iBAAO;AAAA,QACT;AAEA,cAAM,MAAM,KAAK,OAAO;AAExB,YAAI,OAAO,KAAK,SAAS;AACvB,iBAAO,KAAK,MAAM,KAAK,QAAQ,IAAI;AAAA,QACrC;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,SAAS,CAAC,SAAyB;AACjC,cAAM,OAAO,KAAK,KAAK,IAAI;AAE3B,YAAI,SAAS,MAAM;AACjB,iBAAO;AAAA,QACT;AAEA,cAAM,MAAM,KAAK,OAAO;AACxB,eAAO,KAAK,MAAM,IAAI,GAAG,IAAI,MAAM,eAAe,KAAK,MAAM,IAAI,GAAG,CAAW,IAAI;AAAA,MACrF;AAAA,MAEA,SAAS,CAAC,MAAc,cAAsB;AAC5C,cAAM,OAAO,KAAK,KAAK,IAAI;AAE3B,YAAI,SAAS,MAAM;AACjB,iBAAO;AAAA,QACT;AAEA,cAAM,MAAM,KAAK,OAAO;AACxB,YAAI,cAAc,IAAI;AACpB,eAAK,MAAM,OAAO,GAAG;AACrB,iBAAO;AAAA,QACT;AAEA,aAAK,MAAM,IAAI,KAAK,MAAM,eAAe,SAAS,CAAC;AAAA,MACrD;AAAA,MAEA,cAAc,CAAC,gBAAwB,gBAAgC;AACrE,aAAK,QAAQ,MAAM,6BAA6B;AAChD,eAAO;AAAA,MACT;AAAA,MAEA,kBAAkB,MAAc;AAC9B,aAAK,QAAQ,MAAM,iCAAiC;AACpD,eAAO;AAAA,MACT;AAAA,MAEA,QAAQ,CAAC,SAAyB;AAChC,eAAO,KAAK,OAAO,IAAI;AAAA,MACzB;AAAA,MAEA,eAAe,CAAC,SAAyB;AACvC,eAAO,KAAK,OAAO,IAAI;AAAA,MACzB;AAAA,MAEA,UAAU,CAAC,SAAiB;AAC1B,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAI,CAAC,OAAO;AACV,iBAAO,KAAK,QAAQ;AAAA,YAClB,sDAAsD,KAAK,SAAS,EAAE,EAAE,SAAS,IAAI,GAAG;AAAA,UAC1F;AAAA,QACF;AACA,cAAM,OAAO,KAAK,SAAS,OAAO,MAAM,MAAM;AAC9C,aAAK,QAAQ,KAAK,IAAI;AAAA,MACxB;AAAA,MAEA,UAAU,CAAC,SAAiB;AAC1B,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAI,CAAC,OAAO;AACV,iBAAO,KAAK,QAAQ;AAAA,YAClB,sDAAsD,KAAK,SAAS,EAAE,EAAE,SAAS,IAAI,GAAG;AAAA,UAC1F;AAAA,QACF;AACA,cAAM,OAAO,KAAK,SAAS,OAAO,MAAM,MAAM;AAC9C,aAAK,QAAQ,KAAK,IAAI;AAAA,MACxB;AAAA,MAEA,WAAW,CAAC,SAAiB;AAC3B,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAI,CAAC,OAAO;AACV,iBAAO,KAAK,QAAQ;AAAA,YAClB,uDAAuD,KAAK,SAAS,EAAE,EAAE,SAAS,IAAI,GAAG;AAAA,UAC3F;AAAA,QACF;AACA,cAAM,OAAO,KAAK,SAAS,OAAO,MAAM,MAAM;AAC9C,aAAK,QAAQ,MAAM,IAAI;AAAA,MACzB;AAAA,MAEA,WAAW,CAAC,SAAiB;AAC3B,cAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,cAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAI,CAAC,OAAO;AACV,iBAAO,KAAK,QAAQ;AAAA,YAClB,uDAAuD,KAAK,SAAS,EAAE,EAAE,SAAS,IAAI,GAAG;AAAA,UAC3F;AAAA,QACF;AACA,cAAM,OAAO,KAAK,SAAS,OAAO,MAAM,MAAM;AAC9C,aAAK,QAAQ,MAAM,IAAI;AAAA,MACzB;AAAA,IACF;AAvSE,SAAK,mBAAmB;AACxB,SAAK,UAAU;AACf,SAAK,WAAW,IAAI,YAAY;AAChC,SAAK,WAAW,IAAI,YAAY;AAEhC,SAAK,SAAS,CAAC;AAGf,SAAK,MAAM,CAAC;AAEZ,SAAK,UAAU;AAAA,EACjB;AAAA,EAtBA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAqBA,MAAM,MAA+B;AACnC,UAAM,QAAQ,IAAI,MAAM,IAAI,KAAK,iBAAiB,OAAO,IAAI,CAAC,GAAG,IAAI;AACrE,UAAM,QAAQ,KAAK,QAAQ;AAC3B,SAAK,QAAQ,KAAK,KAAK;AACvB,WAAO,MAAM,eAAe,KAAK;AAAA,EACnC;AAAA,EAOA,YAAY,MAAmC;AAC7C,QAAI,CAAC,KAAK,MAAM,IAAI,IAAI,GAAG;AACzB,aAAO;AAAA,IACT;AACA,WAAO,KAAK,KAAK,KAAK,MAAM,IAAI,IAAI,CAAW;AAAA,EACjD;AAAA,EASA,YAAY,MAAc,OAAoC;AAC5D,UAAM,SAAS,KAAK,OAAO,KAAK;AAChC,QAAI,WAAW,MAAM;AACnB,aAAO;AAAA,IACT;AAGA,UAAM,SAAS,KAAK,MAAM,IAAI,IAAI,KAAK;AACvC,QAAI,WAAW,MAAM;AACnB,WAAK,QAAQ,UAAU,KAAK,QAAQ;AACpC,WAAK,QAAQ,UAAU;AACvB,UAAI,WAAW,KAAK,QAAQ,SAAS,GAAG;AACtC,aAAK,QAAQ,IAAI;AAAA,MACnB;AAAA,IACF;AAEA,SAAK,MAAM,IAAI,MAAM,UAAU,MAAM;AACrC,WAAO,MAAM,eAAe,UAAU,MAAM;AAAA,EAC9C;AAAA,EAQA,KAAK,MAA4C;AAC/C,UAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,UAAM,QAAQ,KAAK,QAAQ;AAC3B,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,UAAM,SACJ,EAAE,MAAM,kBAAkB,gBAAgB,CAAC,aAAa,yBACpD,IAAI,WAAW,MAAM,MAAM,EAAE,MAAM,EAAE,SACrC,MAAM;AAEZ,WAAO,IAAI,aAAa,MAAM;AAAA,EAChC;AAAA,EAOA,MAAM,OAAoC;AACxC,UAAM,MAAM,KAAK,OAAO,KAAK;AAC7B,QAAI,CAAC,KAAK;AACR,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC1C;AACA,WAAO,MAAM,eAAe,GAAG;AAAA,EACjC;AAAA,EAEA,OAAO,MAAsB;AAC3B,UAAM,WAAW,MAAM,eAAe,IAAI;AAC1C,UAAM,QAAQ,KAAK,QAAQ;AAC3B,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AACA,WAAO,OAAO,MAAM,OAAO,UAAU;AAAA,EACvC;AAAA,EAkMA,IAAI,SAAuB;AACzB,UAAM,MAAM,KAAK,OAAO,KAAK,OAAO,SAAS,GAAG;AAChD,QAAI,QAAQ,MAAM;AAChB,aAAO;AAAA,IACT;AACA,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA,EAGA,EAxMC,UAwMA,UAAS;AAER,SAAK,QAAQ,SAAS;AAGtB,SAAK,OAAO,SAAS;AAAA,EACvB;AAAA,EAGA,CAAC,WAAW,OAAsB;AAChC,UAAM,QAAQ,KAAK,QAAQ;AAC3B,QAAI,CAAC,OAAO;AACV,YAAM,IAAI,MAAM,wBAAwB,OAAO;AAAA,IACjD;AACA,WAAO;AAAA,EACT;AAAA,EAGA,CAAC,cAAc,OAAkB,OAAgB,OAAO;AAEtD,aAAS,CAAC,KAAK,GAAG,KAAK,MAAM,QAAQ;AACnC,UAAI,OAAO,MAAM;AACf,cAAM,MAAM,IAAI,WAAW,IAAI,KAAK,iBAAiB,OAAO,IAAI,UAAU,CAAC,CAAC;AAC5E,YAAI,IAAI,IAAI,WAAW,GAAG,CAAC;AAC3B,cAAM,IAAI;AAAA,MACZ;AACA,WAAK,QAAQ,OAAO,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI;AAAA,IACpD;AACA,SAAK,SAAS,MAAM;AAAA,EACtB;AAAA,EAGA,CAAC,gBAA2B;AAC1B,WAAO;AAAA,MACL,OAAO,KAAK,OAAO,MAAM;AAAA,MACzB,QAAQ,KAAK,QACV,IAAI,CAAC,OAAO,QAAQ;AACnB,YAAI,CAAC,OAAO;AACV,iBAAO,CAAC,MAAM,GAAG;AAAA,QACnB;AAEA,YAAI,MAAM,OAAO;AACf,gBAAM,QAAQ;AACd,iBAAO,CAAC,MAAM,QAAQ,GAAG;AAAA,QAC3B;AACA,eAAO;AAAA,MACT,CAAC,EACA,OAAO,OAAO;AAAA,IACnB;AAAA,EACF;AAAA,EAGA,CAAC,OAAO,OAA6B;AACnC,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,QAAI,OAAO,UAAU,UAAU;AAC7B,cAAQ,KAAK,SAAS,OAAO,KAAK;AAAA,IACpC;AAEA,QAAI,iBAAiB,YAAY;AAC/B,UAAI,MAAM,OAAO,gBAAgB,KAAK,kBAAkB;AAEtD,cAAMA,OAAM,KAAK,QAAQ;AACzB,aAAK,QAAQ,KAAK,IAAI,MAAM,MAAM,QAAQ,IAAI,CAAC;AAC/C,eAAOA;AAAA,MACT;AACA,YAAM,MAAM,MAAM,eAAe,KAAK,MAAM,MAAM,MAAM,CAAC;AACzD,YAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAM,MAAM,IAAI,WAAW,MAAM,MAAM;AACvC,UAAI,IAAI,OAAO,CAAC;AAChB,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA,EAGA,CAAC,OAAO,OAAsB;AAC5B,SAAK,OAAO,KAAK,CAAC,OAAO,MAAM,IAAI,CAAC;AAAA,EACtC;AAAA,EAGA,CAAC,OAAuC;AACtC,UAAM,CAAC,EAAE,WAAW,QAAQ,IAAI,KAAK,OAAO,IAAI;AAChD,UAAM,iBAAiB,aAAa,OAAO,IAAI;AAC/C,UAAM,MAAM,YAAY;AACxB,UAAM,SAAyC,CAAC,MAAM,IAAI;AAE1D,QAAI,QAAQ,MAAM;AAChB,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ,KAAK,QAAQ;AAE3B,QAAI,UAAU,MAAM;AAElB,aAAO;AAAA,IACT;AAEA,WAAO,kBAAkB;AAEzB,WAAO;AAAA,EACT;AACF;;;ACrdA,SAAS,YAAY;AAErB,SAAS,eAAe;AACxB,SAAS,YAAY;AACrB,SAAS,iBAAiB;AAE1B,eAAe,mBAAmB;AAChC,QAAM,CAAC,OAAO,MAAM,IAAI,MAAM,QAAQ,IAAI,CAAC,KAAK,SAAS,GAAG,GAAG,KAAK,SAAS,GAAG,CAAC,CAAC;AAClF,MAAI,aAAa;AAGjB,MAAI,QAAQ,YAAY;AACtB,cAAU,KAAY;AACtB,cAAU,MAAa;AAAA,EACzB;AACA,MAAI,OAAO,UAAU,UAAU;AAC7B,UAAM,KAAK,IAAI,WAAW,qBAAqB,CAAC,SAAiB;AAC/D,UAAI;AACF,YAAI;AAAY,oBAAU,IAAI;AAAA,MAChC,QAAE;AAAA,MAEF;AAAA,IACF,CAAC;AAED,OAAG,SAAS,OAAO,MAAM,EAAE;AAC3B,OAAG,SAAS,QAAQ,OAAO,EAAE;AAC7B,YAAQ,YAAY;AAClB,mBAAa;AACb,YAAM,QAAQ,IAAI,CAAC,MAAM,MAAM,GAAG,OAAO,MAAM,CAAC,CAAC,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC;AAAA,IACnE;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA,KAAK,CAAC,MAAM,IAAI,OAAO,IAAI,OAAO,EAAE;AAAA,EACtC;AACF;AAEA,eAAsB,SACpB,cACA,kBACuB;AACvB,QAAM;AAAA,IACJ;AAAA,IACA,KAAK,CAAC,OAAO,QAAQ,MAAM;AAAA,EAC7B,IAAI,mBAAmB,EAAE,MAAM,QAAQ;AAAA,EAAC,GAAG,KAAK,CAAC,GAAG,GAAG,CAAC,EAAE,IAAI,MAAM,iBAAiB;AAErF,QAAM,UAAU,IAAI,KAAK;AAAA,IACvB,SAAS;AAAA,IACT,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAQ;AAER,SAAO;AAAA,IACL,MAAM,eAAe;AACnB,aAAO,QAAQ;AAAA,IACjB;AAAA,IAEA,MAAM,QAAQ;AACZ,YAAM,MAAM;AAAA,IACd;AAAA,IAEA,MAAM,WAAW,UAAgC;AAC/C,YAAM,SAAS,SAAS,QAAQ;AAEhC,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,MAAM,4CAA4C;AAAA,MAC9D;AAEA,UAAI,SAAS,QAAQ,aAAa;AAChC,cAAM,OAAO,SAAS,QAAQ;AAC9B,YAAI,QAAQ,YAAY;AACtB,kBAAQ,WAAW;AAAA,YACjB,SAAS;AAAA,cACP;AAAA,cACA,aAAa,MAAM;AACjB,qBAAK;AAAA,cACP;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH,OAAO;AACL,eAAK;AAAA,QACP;AAAA,MACF,OAAO;AACL,gBAAQ,MAAM;AAAA,UACZ,SAAS;AAAA,YACP;AAAA,YACA,QAAQ,MAAM;AAAA,YAAC;AAAA,UACjB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;;;AC3FO,IAAM,aAAa;AAInB,IAAM,mBAAN,MAAuB;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAmB;AAAA,EACnB;AAAA,EAEA,YAAY,SAAsB,OAAiB,SAA+B,MAA2B;AAC3G,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEA,MAAM,QAA0B;AAC9B,QAAI,KAAK,SAAS,GAAG;AACnB,aAAO;AAAA,IACT;AAEA,SAAK,SAAS,OAAO;AACrB,WAAO;AAAA,EACT;AAAA,EAEA,WAAW;AACT,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,eAAe,UAAuD;AAC1E,QAAI;AACF,YAAM,SAAmB,CAAC,EAAE,OAAY,QAAQ;AAChD,YAAM,CAAC,QAAQ,IAAI,IACjB,OAAO,WAAW,IACd,CAAC,KAAK,aAAa,OAAO,EAAE,GAAG,OAAO,EAAE,IACxC;AAAA,QACE,KAAK,SAAS,KAAK,CAAC,UAAU;AAC5B,gBAAM,UAAU,YAAY,OAAO,QAAQ,MAAM,MAAM;AACvD,iBAAO,QAAQ,KAAK,CAAC,SAAS;AAC5B,mBAAO,KAAK,SAAS,OAAO,MAAM,KAAK,SAAS;AAAA,UAClD,CAAC;AAAA,QACH,CAAC;AAAA,QACD,OAAO;AAAA,MACT;AAEN,UAAI,CAAC,QAAQ;AACX,eAAO;AAAA,MACT;AAEA,YAAM,OAAO,OAAO,SAAS,QAAQ;AAErC,UAAI,CAAC,MAAM;AACT,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT,QAAE;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEA,MAAM,UAAU,UAAqC,OAA+D;AAClH,SAAK,UAAU;AACf,UAAM,SAAmB,CAAC,EAAE,OAAY,QAAQ;AAChD,UAAM,CAAC,QAAQ,IAAI,IACjB,OAAO,WAAW,IACd,CAAC,KAAK,aAAa,OAAO,EAAE,GAAG,OAAO,EAAE,IACxC;AAAA,MACE,KAAK,SAAS,KAAK,CAAC,UAAU;AAC5B,cAAM,UAAU,YAAY,OAAO,QAAQ,MAAM,MAAM;AACvD,eAAO,QAAQ,KAAK,CAAC,SAAS;AAC5B,iBAAO,KAAK,SAAS,OAAO,MAAM,KAAK,SAAS;AAAA,QAClD,CAAC;AAAA,MACH,CAAC;AAAA,MACD,OAAO;AAAA,IACT;AAEN,QAAI,CAAC,QAAQ;AACX,YAAM,MAAM,yBAAyB,OAAO,KAAK,KAAK,mBAAmB;AAAA,IAC3E;AACA,UAAM,OAAO,OAAO,SAAS,QAAQ;AACrC,QAAI,CAAC,MAAM;AACT,YAAM,MAAM,2BAA2B,OAAO,KAAK,KAAK,mBAAmB;AAAA,IAC7E;AAEA,SAAK,SAAS,OAAO,SAAS,IAAI;AAClC,QAAI;AACF,WAAK;AACL,aAAO,KAAK,SAAS,KAAK;AAAA,IAC5B,SAAS,KAAP;AACA,WAAK,SAAS,KAAK;AACnB,YAAM;AAAA,IACR,UAAE;AACA,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAAA,EAEA,MAAM,KAAK,UAAqC,OAA2D;AACzG,UAAM,WAAW,KAAK,SAAS,OAAO,KAAK;AAC3C,UAAM,CAAC,UAAU,SAAS,IAAI,MAAM,KAAK,UAAU,UAAU,QAAQ;AACrE,UAAM,cAAc,aAAa;AACjC,UAAM,MAAM,YAAY;AAExB,QAAI,QAAQ,MAAM;AAChB,aAAO;AAAA,IACT;AAEA,UAAM,QAAQ,KAAK,SAAS,WAAW,GAAG;AAC1C,QAAI,CAAC,OAAO;AACV,aAAO;AAAA,IACT;AAEA,UAAM,SAAS,IAAI,aAAa,MAAM,MAAM;AAC5C,QAAI,aAAa;AACf,YAAM,IAAI,MAAM,4BAA4B,OAAO,OAAO,GAAG;AAAA,IAC/D;AACA,WAAO;AAAA,EACT;AAAA,EAEQ,aAAa,MAA+B;AAClD,UAAM,SAAS,OAAO,QAAQ,GAAG;AACjC,UAAM,MAAM,KAAK,OAAO,UAAU,CAAC,OAAO,OAAO,MAAM;AACvD,QAAI,QAAQ,IAAI;AACd,YAAM,IAAI,MAAM,oBAAoB,OAAO;AAAA,IAC7C;AACA,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EAEA,MAAM,WAAW,MAA8D;AAC7E,WAAO,YAAY,OAAO,QAAQ,KAAK,aAAa,IAAI,EAAE,MAAM,KAAK,CAAC;AAAA,EACxE;AAAA,EAEA,MAAM,WAAW,MAA8D;AAC7E,WAAO,YAAY,OAAO,QAAQ,KAAK,aAAa,IAAI,EAAE,MAAM,KAAK,CAAC;AAAA,EACxE;AAAA,EAEA,MAAM,YAAY,MAA8C;AAC9D,WAAO,KAAK,aAAa,IAAI,EAAE;AAAA,EACjC;AAAA,EAEA,MAAM,QAAuB;AAC3B,QAAI,KAAK,OAAO;AACd,YAAM,KAAK,MAAM,MAAM;AACvB,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AACF;AAEA,eAAsB,uBACpB,MACA,OACA,SACA,UAAuB,IAAI,YAAY,aAAa,KAAK,QAAQ,KAAK,MAAM,GACjD;AAC3B,QAAM,OAAO,KAAK,cAAc,MAAM,SAAS,KAAK,cAAc,KAAK,gBAAgB,IAAI;AAE3F,QAAM,UAA+C;AAAA,IACnD,GAAI,OAAO,EAAE,wBAAwB,MAAM,KAAK,aAAa,EAAE,IAAI,CAAC;AAAA,IACpE,CAAC,aAAa,QAAQ;AAAA,IACtB,KAAK,CAAC;AAAA,EACR;AAEA,aAAW,aAAa,KAAK,WAAW;AACtC,YAAQ,aAAa,QAAQ,cAAc,CAAC;AAC5C,eAAW,QAAQ,KAAK,UAAU,YAAY;AAC5C,cAAQ,WAAW,QAAQ,KAAK,UAAU,WAAW,MAAM,KAAK,MAAM,OAAO;AAAA,IAC/E;AAAA,EACF;AAEA,QAAM,YAAY,MAAM,QAAQ;AAAA,IAC9B,QAAQ,IAAI,OAAO,WAAW;AAC5B,YAAM,WAAW,MAAM,YAAY,YAAY,QAAQ,OAAO;AAC9D,UAAI,MAAM;AACR,cAAM,MAAM,WAAW,QAAQ;AAAA,MACjC;AAEA,YAAM,YAAY,SAAS,QAAQ,UAC/B,YACA,SAAS,QAAQ,cACjB,YACA,SAAS,QAAQ,SACjB,YACA;AAEJ,YAAM,cAAmB,SAAS,QAAQ,UAAU,SAAS,QAAQ,UAAU,MAAM;AAAA,MAAC;AACtF,kBAAY;AAEZ,aAAO,EAAE,QAAQ,UAAU,UAAU;AAAA,IACvC,CAAC;AAAA,EACH;AAEA,SAAO,IAAI,iBAAiB,SAAS,OAAO,WAAW,IAAI;AAC7D;;;ALhMA,IAAM,WAAW;AAEjB,IAAM,UAAN,MAAc;AAAA,EASZ,YAAY,MAAyB;AACnC,QAAI,CAAC,MAAM;AACT,YAAM,IAAI,MAAM,iFAAiF;AAAA,IACnG;AAEA,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,KAAK,GAAG,WAAW,CAAC,OAAY,KAAK,cAAc,EAAE,CAAC;AAC3D,SAAK,KAAK,YAAY,EAAE,MAAM,cAAc,CAAC;AAE7C,SAAK,kBAAkB,oBAAI,IAAI;AAC/B,SAAK,gBAAgB;AAAA,MACnB;AAAA,MACA,OAAO,UAAiB,MAAiC,OAAsB,UAAqB;AAClG,YAAI,CAAC,KAAK,SAAS;AACjB,gBAAM,IAAI,MAAM,uDAAuD;AAAA,QACzE;AAEA,aAAK,QAAQ,cAAc,KAAK;AAEhC,cAAM,UAAe,MAAM,KAAK,QAAQ,UAAU,MAAM,KAAK,EAAE;AAAA,UAC7D,CAAC,YAAY,CAAC,MAAM,OAAO;AAAA,UAC3B,CAAC,QAAQ,CAAC,KAAK,IAAI;AAAA,QACrB;AAEA,gBAAQ,KAAK,QAAQ,cAAc;AACnC,mBAAW,CAAC,KAAK,KAAK,MAAM,QAAQ;AAClC,cAAI,OAAO;AACT,qBAAS,KAAK,KAAK;AAAA,UACrB;AAAA,QACF;AAEA,YAAI,QAAQ,IAAI;AACd,kBAAQ,KAAK;AAAA,YACX,eAAe,QAAQ,IAAI;AAAA,YAC3B,SAAS,QAAQ,IAAI;AAAA,UACvB;AAAA,QACF;AAEA,eAAO,EAAE,SAAS,MAAM;AAAA,MAC1B;AAAA,IACF;AAEA,SAAK,gBAAgB,IAAI,SAAS,OAAO,SAAS;AAChD,aAAO,KAAK,QAAQ,MAAM;AAAA,IAC5B,CAAC;AAED,SAAK,gBAAgB,IAAI,cAAc,OAAO,MAAM,SAAS;AAC3D,aAAO,KAAK,QAAQ,WAAW,IAAI;AAAA,IACrC,CAAC;AAED,SAAK,gBAAgB,IAAI,cAAc,OAAO,MAAM,SAAS;AAC3D,aAAO,KAAK,QAAQ,WAAW,IAAI;AAAA,IACrC,CAAC;AAED,SAAK,gBAAgB,IAAI,kBAAkB,OAAO,MAAM,SAAS;AAC/D,aAAO,KAAK,QAAQ,eAAe,IAAI;AAAA,IACzC,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,cAAc,IAAS;AAC3B,YAAQ,GAAG,MAAM;AAAA,MACf,KAAK;AACH,eAAO,MAAM,KAAK,WAAW,EAAE;AAAA,MACjC,KAAK;AACH,eAAO,MAAM,KAAK,aAAa,EAAE;AAAA,IACrC;AAAA,EACF;AAAA,EAEA,MAAM,aAAa,IAAsC;AACvD,UAAM,UAAU,KAAK,gBAAgB,IAAI,GAAG,OAAO;AACnD,QAAI,CAAC,SAAS;AACZ,aAAO,KAAK,KAAK,YAAY;AAAA,QAC3B,MAAM;AAAA,QACN,QAAQ,CAAC,6BAA6B,GAAG,WAAW,IAAI;AAAA,MAC1D,CAAC;AAAA,IACH;AAEA,UAAM,WAAkB,CAAC;AACzB,UAAM,UAAU,MAAM,QAAQ,UAAU,GAAI,GAAG,QAAQ,CAAC,CAAE,EAAE;AAAA,MAC1D,CAAC,OAAO,CAAC,MAAM,EAAE;AAAA,MACjB,CAAC,QAAQ,CAAC,KAAK,IAAI;AAAA,IACrB;AAEA,QAAI,QAAQ,IAAI;AACd,cAAQ,KAAK;AAAA,QACX,eAAe,QAAQ,IAAI;AAAA,QAC3B,SAAS,QAAQ,IAAI;AAAA,MACvB;AAAA,IACF;AAEA,WAAO,KAAK,KAAK;AAAA,MACf;AAAA,QACE,MAAM;AAAA,QACN;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,WACJ,IAOA;AACA,SAAK,aAAa,GAAG;AACrB,SAAK,iBAAiB,IAAI,SAAS,GAAG,UAAU;AAChD,SAAK,WAAW,IAAI,WAAW,KAAK,UAAU;AAE9C,UAAM,YAAY,OAAO;AAAA,MACvB,OAAO,QAAQ,GAAG,SAAS,EAAE,IAAI,CAAC,CAAC,WAAW,KAAK,MAAM;AACvD,eAAO;AAAA,UACL;AAAA,UACA,OAAO;AAAA,YACL,MAAM,IAAI,CAAC,aAAa;AACtB,qBAAO;AAAA,gBACL;AAAA,gBACA,CAAC,YAAyB,SAAgB,KAAK,SAAS,SAAS,WAAW,UAAU,IAAI;AAAA,cAC5F;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,UAAM,EAAE,MAAM,GAAG,SAAS,WAAW,OAAO,KAAK,IAAI;AAErD,UAAM,WAAW,CAAC,UAAkB,CAAC,YAAoB,KAAK,KAAK,YAAY,EAAE,MAAM,OAAO,OAAO,QAAQ,CAAC;AAI9G,UAAM,SAAS,OAAO;AAAA,MACpB,CAAC,QAAQ,SAAS,QAAQ,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,SAAS,GAAG,CAAC,CAAC;AAAA,IACtE;AAEA,SAAK,UAAU,IAAI,YAAY,aAAa,QAAQ,GAAG,MAAM;AAE7D,SAAK,SAAS,MAAM;AAAA,MAClB,EAAE,GAAG,MAAM,WAAW,OAAO,OAAO;AAAA,MACpC,GAAG;AAAA,MACH;AAAA,MACA,KAAK;AAAA,IACP;AAEA,SAAK,KAAK,YAAY,EAAE,MAAM,QAAQ,CAAC;AAAA,EACzC;AAAA,EAEA,SAAS,SAAsB,WAAmB,MAAc,MAAmD;AACjH,QAAI,CAAC,KAAK,UAAU;AAClB,YAAM,IAAI,MAAM,6DAA6D;AAAA,IAC/E;AACA,UAAM,QAAQ,QAAQ,cAAc;AAEpC,SAAK,KAAK,YAAY;AAAA,MACpB,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,UAAM,SAAS,IAAI,iBAAiB,KAAK,UAA+B;AACxE,UAAM,SAA6C,CAAC;AACpD,QAAI;AAEJ,OAAG;AACD,YAAM,cAAc,OAAO,UAAU;AACrC,cAAQ,aAAa;AAAA,QAEnB,KAAK;AACH,gBAAM,SAAS;AACf,kBAAQ,cAAc,KAAK;AAC3B,iBAAO,MAAM;AACb,eAAK,SAAS,KAAK,iBAAiB;AACpC,iBAAO;AAAA,QAGT,KAAK;AACH,mBAAS,OAAO,WAAW;AAC3B;AAAA,QAGF,KAAK;AACH,mBAAS,OAAO,YAAY;AAC5B;AAAA,QAGF,KAAK;AACH,mBAAS;AACT;AAAA,QAGF,KAAK;AACH;AACE,kBAAM,QAAQ,OAAO,WAAW;AAChC,kBAAM,MAAM,OAAO,WAAW;AAC9B,gBAAI,CAAC,KAAK;AACR,qBAAO,KAAK,CAAC,MAAM,KAAK,CAAC;AAAA,YAC3B,OAAO;AACL,oBAAM,SAAS,IAAI,WAAW,GAAG;AACjC,qBAAO,KAAK,MAAM;AAClB,qBAAO,KAAK,CAAC,OAAO,QAAQ,KAAK,CAAC;AAAA,YACpC;AAAA,UACF;AACA;AAAA,QAEF;AACE,gBAAM,IAAI;AAAA,YACR,yBAAyB,8HAA8H;AAAA,UACzJ;AACA;AAAA,MACJ;AAAA,IACF,SAAS;AAAA,EACX;AACF;AAEA,IAAI,QAAQ,UAAU;AAEtB,IAAM,oBAAN,MAAuB;AAAA,EAWrB,YAAY,OAA0B;AACpC,SAAK,QAAQ;AACb,SAAK,cAAc,kBAAiB;AACpC,SAAK,OAAO,IAAI,WAAW,KAAK,KAAK;AACrC,SAAK,UAAU,IAAI,YAAY,CAAC;AAChC,SAAK,cAAc,IAAI,SAAS,KAAK,OAAO;AAC5C,SAAK,WAAW;AAChB,SAAK,KAAK,KAAK;AAAA,EACjB;AAAA,EAEA,IAAI,YAAY;AACd,WAAO,KAAK,KAAK,KAAK,KAAK;AAAA,EAC7B;AAAA,EAEA,QAAQ;AACN,WACE,QAAQ,gBAAgB,KAAK,MAAM,kBAAiB,SAAS,KAAK,UAAU,kBAAiB,eAAe,MAC5G,kBAAiB,iBACjB;AAAA,IAAC;AACH,YAAQ,OAAO,KAAK,MAAM,kBAAiB,SAAS,QAAQ;AAAA,EAC9D;AAAA,EAEA,KAAK,QAAiB,MAAM;AAC1B,QAAI,OAAO;AACT,aACE,QAAQ;AAAA,QACN,KAAK;AAAA,QACL,kBAAiB;AAAA,QACjB,KAAK;AAAA,QACL,kBAAiB;AAAA,MACnB,MAAM,kBAAiB,iBACvB;AAAA,MAAC;AACH,cAAQ,OAAO,KAAK,MAAM,kBAAiB,SAAS,QAAQ;AAAA,IAC9D;AAEA,UAAM,IAAI,QAAQ,KAAK,KAAK,MAAM,GAAG,kBAAiB,iBAAiB,QAAQ;AAC/E,SAAK,WAAW,QAAQ,KAAK,KAAK,MAAM,CAAC;AACzC,QAAI,MAAM,aAAa;AACrB,YAAM,IAAI,MAAM,yDAAyD,cAAc,KAAK,KAAK,IAAI;AAAA,IACvG;AACA,SAAK,cAAc,kBAAiB;AAAA,EACtC;AAAA,EAEA,KAAK,QAAoB;AACvB,QAAI,OAAO,aAAa,KAAK,WAAW;AACtC,aAAO,IAAI,IAAI,WAAW,KAAK,KAAK,EAAE,SAAS,KAAK,aAAa,KAAK,cAAc,OAAO,UAAU,CAAC;AACtG,WAAK,eAAe,OAAO;AAC3B;AAAA,IACF;AAEA,QAAI,eAAe;AACnB,QAAI,SAAS,KAAK;AAGlB,OAAG;AACD,aAAO,IAAI,IAAI,WAAW,KAAK,KAAK,EAAE,SAAS,KAAK,aAAa,KAAK,cAAc,MAAM,GAAG,YAAY;AACzG,sBAAgB;AAChB,WAAK,eAAe;AACpB,UAAI,iBAAiB,OAAO,YAAY;AACtC;AAAA,MACF;AAEA,UAAI,KAAK,YAAY,GAAG;AACtB;AAAA,MACF;AAEA,WAAK,KAAK;AACV,eAAS,KAAK,IAAI,KAAK,IAAI,KAAK,WAAW,CAAC,GAAG,OAAO,aAAa,YAAY;AAAA,IACjF,SAAS,iBAAiB,OAAO;AAAA,EACnC;AAAA,EAEA,YAAoB;AAClB,SAAK,KAAK,IAAI,WAAW,KAAK,OAAO,EAAE,SAAS,GAAG,CAAC,CAAC;AACrD,WAAO,KAAK,YAAY,SAAS,CAAC;AAAA,EACpC;AAAA,EAEA,aAAqB;AACnB,SAAK,KAAK,IAAI,WAAW,KAAK,OAAO,EAAE,SAAS,GAAG,CAAC,CAAC;AACrD,WAAO,KAAK,YAAY,UAAU,GAAG,IAAI;AAAA,EAC3C;AAAA,EAEA,aAAqB;AACnB,SAAK,KAAK,IAAI,WAAW,KAAK,OAAO,CAAC;AACtC,WAAO,KAAK,YAAY,aAAa,GAAG,IAAI;AAAA,EAC9C;AAAA,EAEA,cAAsB;AACpB,SAAK,KAAK,IAAI,WAAW,KAAK,OAAO,CAAC;AACtC,WAAO,KAAK,YAAY,WAAW,GAAG,IAAI;AAAA,EAC5C;AACF;AArGA,IAAM,mBAAN;AAAM,iBAQG,UAAU;AARb,iBASG,kBAAkB;",
  "names": ["idx"]
}
